# 应用服务 WEB 访问端口
server:
  port: 7090
  servlet:
    context-path: /api
  session:
    timeout: PT60M

spring:
  profiles:
    active: dev
  mvc:
    favicon:
      enabled: false   #处理favicon
    throw-exception-if-no-handler-found: true #异常处理
  web:
    resources:
      add-mappings: false
  #数据库配置
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/cloud_storage?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true
    username: root
    password: wth
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: HikariCPDatasource
      minimum-idle: 5
      idle-timeout: 180000
      maximum-pool-size: 10
      auto-commit: true
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  #发送邮件配置相关
  mail:
    host: ${spring.mail.host} # 配置邮件服务器的地址
    port: ${spring.mail.port} # 配置邮件服务器的端口（465或587）
    username: ${spring.mail.username} # 配置用户的账号
    password: ${spring.mail.password} # 配置用户的密码
    default-encoding: UTF-8 # 配置默认编码
    properties:
      mail:
        smtp:
          socketFactory:
            class: javax.net.ssl.SSLSocketFactory # SSL 连接配置
        debug: false # 开启 debug，这样方便开发者查看邮件发送日志
  redis:
    database: 0
    host: ${spring.redis.host}
    port: ${spring.redis.port}
    jedis:
      pool:
        max-active: 20 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 10 # 连接池中的最大空闲连接
        min-idle: 0  # 连接池中的最小空闲连接
        timeout: 2000 # 连接超时时间（毫秒）

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      logic-delete-value: 1 # 逻辑删除
      logic-not-delete-value: 0
      logic-delete-field: isDelete
#项目目录
#project:
#  folder:
#    ${project.folder}
# 日期序列化为时间戳
jackson:
  serialization:
    write-dates-as-timestamps: true


#日志级别配置
log:
  root:
    level: ${log.root.level}
  #超级管理员id
admin:
  emails: ${admin.emails}
##qq登陆相关##
qq:
  app:
    id: ${qq.app.id}
    key: ${qq.app.key}
  url:
    authorization: ${qq.url.authorization}
    token: ${qq.url.token}
    openid: ${qq.url.openid}
    redirect: ${qq.url.redirect}
    user:
      info: ${qq.url.user.info}

cos:
  client:
    accessKey: ${cos.client.accessKey}
    secretKey: ${cos.client.secretKey}
    region: ${cos.client.region}
    bucket: ${cos.client.bucket}
    host: ${cos.client.host}

